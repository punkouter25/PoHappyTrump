@page "/diag"
@using System.Net.Http
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components
@using PoHappyTrump.Client.Models

<PageTitle>Diagnostics - PoHappyTrump</PageTitle>

<div class="mobile-container">
    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" Class="rz-p-4">
        <RadzenText Text="üîß System Diagnostics" TextStyle="TextStyle.H1" TagName="TagName.H1" Class="rz-text-center mobile-header" />
        <RadzenText Text="Checking application dependencies and health status..." TextStyle="TextStyle.Subtitle1" TagName="TagName.P" Class="rz-text-center mobile-text" />

        @if (diagnostics == null)
        {
            <div class="loading-container touch-spacing">
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Class="rz-mt-4" />
                <RadzenText Text="Loading diagnostics..." TextStyle="TextStyle.Body1" TagName="TagName.P" Class="mobile-text" />
            </div>
        }
        else
        {
            @if (diagnostics != null && diagnostics.Any(d => !d.IsSuccessful))
            {
                <RadzenCard Variant="Variant.Filled" Class="rz-mt-4 mobile-card error-container" Style="background-color: var(--rz-error-light); color: var(--rz-error-dark);">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                        <RadzenText Text="‚ö†Ô∏è Some dependencies are unhealthy!" TextStyle="TextStyle.H5" TagName="TagName.H5" Class="mobile-text" />
                        <ul style="margin: 0; padding-left: 1.2rem;">
                            @foreach (var diag in diagnostics.Where(d => !d.IsSuccessful))
                            {
                                <li class="mobile-text"><strong>@diag.CheckName:</strong> @diag.Details</li>
                            }
                        </ul>
                    </RadzenStack>
                </RadzenCard>
            }
            else
            {
                <RadzenCard Variant="Variant.Filled" Class="mobile-card success-container" Style="background-color: var(--rz-success-light); color: var(--rz-success-dark); text-align: center;">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.Center">
                        <RadzenText Text="‚úÖ All Systems Healthy!" TextStyle="TextStyle.H5" TagName="TagName.H5" Class="mobile-text" />
                        <RadzenText Text="All dependencies are running smoothly." TextStyle="TextStyle.Body1" TagName="TagName.P" Class="mobile-text" />
                    </RadzenStack>
                </RadzenCard>
            }

            <!-- Mobile-responsive table -->
            <RadzenCard Variant="Variant.Filled" Class="mobile-card">
                <div class="table-responsive mobile-table">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th class="mobile-text">Dependency</th>
                                <th class="mobile-text">Status</th>
                                <th class="mobile-text">Details</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var diag in diagnostics)
                            {
                                <tr>
                                    <td class="mobile-text">
                                        <strong>@diag.CheckName</strong>
                                    </td>
                                    <td class="mobile-text">
                                        @if (diag.IsSuccessful)
                                        {
                                            <span style="color: #28a745; font-weight: bold;">‚úÖ Healthy</span>
                                        }
                                        else
                                        {
                                            <span style="color: #dc3545; font-weight: bold;">‚ùå Unhealthy</span>
                                        }
                                    </td>
                                    <td class="mobile-text" style="word-break: break-word;">
                                        @diag.Details
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </RadzenCard>

            <!-- Quick Actions for Diagnostics -->
            <RadzenCard Variant="Variant.Filled" Class="mobile-card" Style="background-color: var(--rz-secondary); opacity: 0.9;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.Center">
                    <RadzenText Text="üîÑ Quick Actions" TextStyle="TextStyle.H6" TagName="TagName.H6" Class="mobile-text" />
                    <div class="responsive-grid">
                        <RadzenButton Text="üîÑ Refresh Diagnostics" 
                                      Click="RefreshDiagnostics" 
                                      ButtonStyle="ButtonStyle.Primary" 
                                      Variant="Variant.Filled" 
                                      Size="ButtonSize.Medium"
                                      Class="mobile-button"
                                      IsLoading="@isRefreshing" />
                        <RadzenButton Text="üè† Back to Home" 
                                      Click="@(() => NavigationManager.NavigateTo("/"))" 
                                      ButtonStyle="ButtonStyle.Secondary" 
                                      Variant="Variant.Outlined" 
                                      Size="ButtonSize.Medium"
                                      Class="mobile-button" />
                    </div>
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenStack>
</div>

@inject HttpClient Http
@inject NavigationManager NavigationManager

@code {
    private List<DiagnosticResult>? diagnostics;
    private bool isRefreshing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDiagnostics();
    }

    private async Task LoadDiagnostics()
    {
        try
        {
            diagnostics = await Http.GetFromJsonAsync<List<DiagnosticResult>>("api/Diagnostics");
        }
        catch (Exception ex)
        {
            // Handle error, maybe set a single diagnostic result indicating failure to fetch
            diagnostics = new List<DiagnosticResult>
            {
                new DiagnosticResult { CheckName = "Diagnostic Service", IsSuccessful = false, Details = $"Error fetching diagnostics: {ex.Message}" }
            };
        }
    }

    private async Task RefreshDiagnostics()
    {
        isRefreshing = true;
        StateHasChanged();
        
        await LoadDiagnostics();
        
        isRefreshing = false;
        StateHasChanged();
    }
}
