@page "/"

<PageTitle>PoHappyTrump - Make America Great Again!</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-p-4">
    <RadzenText Text="Make America Great Again!" TextStyle="TextStyle.H1" TagName="TagName.H1" Class="rz-text-center" />
    <RadzenText Text="Click the button below to get a positive message!" TextStyle="TextStyle.Subtitle1" TagName="TagName.P" Class="rz-text-center" />

    <RadzenButton Text="Get Positive Message" Click="GetMessage" IsLoading="@isLoading" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Size="ButtonSize.Large" />

    @if (isLoading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Class="rz-mt-4" />
        <RadzenText Text="Loading..." TextStyle="TextStyle.Body1" TagName="TagName.P" />
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <RadzenCard Variant="Variant.Filled" Class="rz-mt-4" Style="background-color: var(--rz-error-light); color: var(--rz-error-dark);">
            <RadzenText Text="@errorMessage" TextStyle="TextStyle.Body1" TagName="TagName.P" />
        </RadzenCard>
    }
    else if (!string.IsNullOrEmpty(message))
    {
        <RadzenCard Variant="Variant.Filled" Class="rz-mt-4" Style="width: 100%; max-width: 600px;">
            <RadzenText Text="Positive Message:" TextStyle="TextStyle.H6" TagName="TagName.H6" />
            <RadzenText Text="@message" TextStyle="TextStyle.Body1" TagName="TagName.P" />
        </RadzenCard>
    }
</RadzenStack>

@code {
    private string? message;
    private string? errorMessage;
    private bool isLoading = false;

    [Inject]
    private HttpClient Http { get; set; } = default!;

    private async Task GetMessage()
    {
        isLoading = true;
        errorMessage = null;
        message = null;
        try
        {
            // Use the injected HttpClient
            var response = await Http.GetAsync("api/TrumpMessage");
            if (response.IsSuccessStatusCode)
            {
                message = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Received message: {message}"); // Log received message
                StateHasChanged(); // Notify component that state has changed
            }
            else
            {
                errorMessage = "No messages found or an error occurred.";
                StateHasChanged(); // Notify component that state has changed
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            StateHasChanged(); // Notify component that state has changed
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Notify component that state has changed
        }
    }

    [Inject] NavigationManager NavigationManager { get; set; } = default!;
}
