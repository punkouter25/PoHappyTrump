@page "/"
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject ILogger<Home> Logger
@inject IJSRuntime JSRuntime

<PageTitle>PoHappyTrump - Make America Great Again!</PageTitle>

<div class="mobile-container">
    <div style="text-align: center; padding: 1rem;">
        <h1 class="mobile-header">Make America Great Again!</h1>
        <p class="mobile-text">Click the button below to get a positive message!</p>

        <button @onclick="GetMessage" class="mobile-button touch-spacing" disabled="@isLoading">
            @if (isLoading)
            {
                <span>Loading...</span>
            }
            else
            {
                <span>Get Positive Message</span>
            }
        </button>

        @if (isLoading)
        {
            <div class="loading-container touch-spacing">
                <div class="loading-spinner">Loading...</div>
                <p class="mobile-text">Loading awesome content...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="mobile-card error-container" style="background-color: #ffebee; color: #c62828; padding: 1rem; margin-top: 1rem; border-radius: 8px;">
                <p class="mobile-text">@errorMessage</p>
                <button @onclick="GetMessage" class="mobile-button touch-spacing" style="margin-top: 1rem;">
                    Try Again
                </button>
            </div>
        }
        else if (!string.IsNullOrEmpty(message))
        {
            bool isContentFilter = message.Contains("[Note: Message transformation failed") && message.Contains("content_filter");
            <div class="mobile-card success-container card-fade-in" style="width: 100%; max-width: 600px; background-color: #e8f5e8; color: #2e7d32; padding: 1rem; margin-top: 1rem; border-radius: 8px;">
                <h6 class="mobile-text">üá∫üá∏ Positive Message:</h6>
                <p class="mobile-text" style="word-break: break-word; hyphens: auto;">@message</p>
                
                <div class="responsive-grid touch-spacing">
                    <button @onclick="() => CopyToClipboard(message)" class="mobile-button">
                        üìã Copy Message
                    </button>
                    <button @onclick="GetMessage" class="mobile-button">
                        Get Another
                    </button>
                </div>
                
                @if (isContentFilter)
                {
                    <div class="mobile-card" style="background-color: #fff3e0; color: #ef6c00; padding: 0.5rem; margin-top: 0.5rem; border-radius: 4px;">
                        <p class="mobile-text">‚ö†Ô∏è Some content was filtered by Azure OpenAI. The original message is shown instead. Please try again or rephrase your request.</p>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="mobile-card" style="background-color: #e3f2fd; color: #1565c0; text-align: center; padding: 1rem; margin-top: 1rem; border-radius: 8px;">
                <h6 class="mobile-text">üöÄ Welcome to PoHappyTrump!</h6>
                <p class="mobile-text">Transform political messages into positive, uplifting content!</p>
                <p class="mobile-text">Ready to spread some positivity? Click the button above!</p>
            </div>
        }
        
        <!-- Quick Actions Section -->
        <div class="mobile-card" style="margin-top: 2rem; background-color: #f3e5f5; opacity: 0.9; padding: 1rem; border-radius: 8px;">
            <h6 class="mobile-text">üîß Quick Actions</h6>
            <div class="responsive-grid">
                <button @onclick="@(() => NavigationManager.NavigateTo("/diag"))" class="mobile-button">
                    üìä View Diagnostics
                </button>
                <button @onclick="GetComparison" class="mobile-button">
                    üîÑ Compare Messages
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private string? errorMessage;
    private bool isLoading = false;

    [Inject]
    private HttpClient Http { get; set; } = default!;

    private async Task GetMessage()
    {
        isLoading = true;
        errorMessage = null;
        message = null;
        StateHasChanged();

        try
        {
            var apiUrl = "api/TrumpMessage";
            var response = await Http.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                message = await response.Content.ReadAsStringAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("API call failed with status: {StatusCode}. Response: {ErrorContent}", response.StatusCode, errorContent);
                errorMessage = "Sorry, we couldn't fetch a message right now. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An unexpected error occurred while fetching the message.");
            errorMessage = "An unexpected error occurred. Please check the logs for more details.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetComparison()
    {
        isLoading = true;
        errorMessage = null;
        message = null;
        StateHasChanged();

        try
        {
            var apiUrl = "api/TrumpMessage/compare";
            var response = await Http.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                var comparison = await response.Content.ReadAsStringAsync();
                message = $"üìä Message Comparison:\n\n{comparison}";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("API call failed with status: {StatusCode}. Response: {ErrorContent}", response.StatusCode, errorContent);
                errorMessage = "Sorry, we couldn't fetch a comparison right now. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An unexpected error occurred while fetching the comparison.");
            errorMessage = "An unexpected error occurred. Please check the logs for more details.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to copy text to clipboard");
        }
    }

    [Inject] NavigationManager NavigationManager { get; set; } = default!;
}
